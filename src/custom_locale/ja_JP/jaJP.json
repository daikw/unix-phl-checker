{
  "main_principles": [
    {
      "id": 1,
      "title": "小さいものは美しい",
      "description": "小さいものは、大きい物にない利点がいくつもある。小さいもの同士なら簡単に独特の便利な方法で組み合わせることができる"
    },
    {
      "id": 2,
      "title": "一つのプログラムにはーつのことをうまくやらせる",
      "description": "一つのことに集中することで、プログラムに不要な部分をなくせる。不要な部分があると、実行速度が遅くなり、不必要に複雑になり、融通が効かなくなる。"
    },
    {
      "id": 3,
      "title": "できるだけ早く試作する",
      "description": "あらゆるプロジェクトにおいて、プロトタイプは重要だ。一般的にプロトタイプは設計全体のうちの一部として扱われているが、UNIXにおいての試作は、効率的な設計には欠かせない重要な一部だ。"
    },
    {
      "id": 4,
      "title": "効率より移植性を優先する",
      "description": "現在のハードウェアに制限されないソフトウェアこそ、未来でも利用される。ハードウェアと切り離すことができないソフトウェアは、そのハードウェアが競争力を持ち続ける間しか価値を維持できない。"
    },
    {
      "id": 5,
      "title": "数値データはASCIIフラットファイルに保存する",
      "description": "移植性のあるデータも移植性のあるプログラムに勝るとも劣らず重要だ。移植性を保つ上で、各OSのバイナリーファイルに依存しないASCIIフラットファイルに保存し、参照可能にする。"
    },
    {
      "id": 6,
      "title": "ソフトウェアを梃子として使う",
      "description": "プログラムの再利用は、ソフトウェアの梃子を最大限に活用した強力な考え方だ。UNIXの開発者たちは、この考え方に従って、非常に多くのアプリケーションを短期間に開発してきた。"
    },
    {
      "id": 7,
      "title": "シェルスクリプトによって梃子の効果と移植性を高める",
      "description": "シェルスクリプトはソフトウェアの梃子を活かすと同時に移植性も高めるという2つの効果がある。"
    },
    {
      "id": 8,
      "title": "過渡の対話的インターフェースを避ける",
      "description": "いくつかのコマンドは、「ユーザーを拘束する」インターフェースを持つ。そのコマンドを実行してしまうと、実行中に他のコマンドを実行することはできない。あるいは、そのコマンドは他のコマンドから実行しずらいので、梃子の効果を発揮できない。"
    },
    {
      "id": 9,
      "title": "すべてのプログラムをフィルタとして設計する",
      "description": "ソフトウェアの本質は、データを処理することで、生成することではない。その能力を最大限に発揮するためには、プログラムをフィルタとして動作するように設計すべきだ。"
    }
  ],
  "sub_principles": [
    {
      "id": 1,
      "title": "好みに応じて自分で環境を調整できるようにする",
      "description": "UNIXのユーザーは、自分の思い通りに環境を手直しすることを好む。"
    },
    {
      "id": 2,
      "title": "OSのカーネルを小さく軽くする",
      "description": "新機能の追加要求が次から次へと出てくる中でも、UNIXの開発者たちはOSの中心部分を小さく軽く保つことを好んできた。"
    },
    {
      "id": 3,
      "title": "小文字を使い、短く",
      "description": "アルファベットの小文字を使うのがUNIXの伝統。"
    },
    {
      "id": 4,
      "title": "森林を守る",
      "description": "UNIXユーザーは紙のドキュメントを嫌う。「データを紙に印刷してしまったら、もうそれ以上操作出来ないんだぞ」"
    },
    {
      "id": 5,
      "title": "沈黙は金",
      "description": "UNIXのコマンドは、詳細なエラーメッセージを出すべき時にも、悪名高いほど沈黙を守る。UNIXは一般に「ドライ」で、ただ「事実」だけを伝える。それ以上でも以下でもない。"
    },
    {
      "id": 6,
      "title": "同時に考える",
      "description": "たいていの仕事は、いくつかの小さい部分に分けられる。これらの小さい部分を同時に実行すると、大きな一つの仕事にかかるのと同じ時間でより多くの仕事ができる。"
    },
    {
      "id": 7,
      "title": "部分の総和は全体よりも大きい",
      "description": "小さい部品を集めて大きなApplicationを作る方が、大規模プログラムを単体で構成するよりも柔軟性に富む。"
    },
    {
      "id": 8,
      "title": "90％の解を目指す",
      "description": "どんなことであれ、100％上手くやることは大変だ。90％のことだけを上手くやれるようにするほうが、はるかに能率的であり費用対効果も最も高い。"
    },
    {
      "id": 9,
      "title": "劣るほうが優れている",
      "description": "インターフェースと実装の両面がシンプルであることが、システムにおける他のいかなる特性よりも重視される――正確さ、堅牢さ、完全さよりも。"
    },
    {
      "id": 10,
      "title": "階層的に考える",
      "description": "UNIXユーザーは、物事を階層構造で整理するのが好きだ。ネットワークサービスでの命名法やウィンドウ管理、オブジェクト指向開発など、他の分野にも同じアイデアが使われている。"
    }
  ]
}
